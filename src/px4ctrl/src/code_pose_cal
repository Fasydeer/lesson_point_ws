#include <ros/ros.h>
#include <geometry_msgs/PointStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <Eigen/Geometry>

ros::Publisher pub;
geometry_msgs::PoseStamped vrpn_pose;
bool got_vrpn = false;

void vrpnCallback(const geometry_msgs::PoseStamped::ConstPtr& msg) {
    vrpn_pose = *msg;
    got_vrpn = true;
}

void qrCodeCallback(const geometry_msgs::PointStamped::ConstPtr& msg) {
    if (!got_vrpn) {
        ROS_WARN("Waiting for VRPN data...");
        return;
    }

    Eigen::Vector3d pose_position(vrpn_pose.pose.position.x,
                                  vrpn_pose.pose.position.y,
                                  vrpn_pose.pose.position.z);

    Eigen::Quaterniond pose_orientation(vrpn_pose.pose.orientation.w,
                                        vrpn_pose.pose.orientation.x,
                                        vrpn_pose.pose.orientation.y,
                                        vrpn_pose.pose.orientation.z);

    Eigen::Affine3d world_transform = Eigen::Translation3d(pose_position) * pose_orientation;

    Eigen::Vector3d qr_code_position(msg->point.x, msg->point.y, msg->point.z);
    Eigen::Vector3d qr_code_world_position = world_transform * qr_code_position;

    geometry_msgs::PointStamped qr_world_point;
    qr_world_point.header.stamp = ros::Time::now();
    qr_world_point.header.frame_id = "world";
    qr_world_point.point.x = qr_code_world_position.x();
    qr_world_point.point.y = qr_code_world_position.y();
    qr_world_point.point.z = qr_code_world_position.z();
    pub.publish(qr_world_point);
}

int main(int argc, char **argv) {
    ros::init(argc, argv, "qr_code_transformer");
    ros::NodeHandle nh;

    ros::Subscriber sub_vrpn = nh.subscribe("vrpn_client_node/drone/pose", 10, vrpnCallback);
    ros::Subscriber sub_qr = nh.subscribe("qr_code_position_camera", 10, qrCodeCallback);

    pub = nh.advertise<geometry_msgs::PointStamped>("qr_code_world", 10);

    ros::spin();
    return 0;
}
